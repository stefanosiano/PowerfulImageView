<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Attributes of the PowerfulImageView.
        For more informations visit https://github.com/stefanosiano/PowerfulImageView -->
    <declare-styleable name="PowerfulImageView">


        <!-- PROGRESS OPTIONS -->

        <!-- Set the gravity of the indicator.
             It will follow the right to left layout (on api 17+), if not disabled. -->
        <attr name="pivProgressGravity" format="enum" >
            <enum name="center" value="0"/>
            <enum name="start" value="1"/>
            <enum name="end" value="2"/>
            <enum name="top" value="3"/>
            <enum name="top_start" value="4"/>
            <enum name="top_end" value="5"/>
            <enum name="bottom" value="6"/>
            <enum name="bottom_start" value="7"/>
            <enum name="bottom_end" value="8"/>
        </attr>

        <!-- Progress mode of the indicator. -->
        <attr name="pivProgressMode" format="enum" >
            <enum name="disabled" value="0"/>
            <enum name="circular" value="1"/>
            <enum name="horizontal" value="2"/>
        </attr>

        <!-- Set whether the view should show an indeterminate progress indicator. -->
        <attr name="pivProgressIndeterminate" format="boolean" />

        <!-- Percentage value of the progress indicator, used by determinate progress.
             If the percentage is higher than 100, it is treated as (value % 100).
             If the percentage is lower than 0, it is treated as 0.
             If the progress is indeterminate or horizontal_determinate it's ignored.
             Note: multiplies of 100 (e.g. 200, 300, ...) will be treated as 0! -->
        <attr name="pivProgressValue" format="float" />

        <!-- Size of the progress indicator, in a specific dimension or in percentage (20dp or 30%).
             If the specific dimension is less than 0, it is ignored.
             If the percentage is higher than 100, it is treated as (value % 100).
             Note that it may be different from the actual size used to draw the progress, since it is
             calculated based on the View size and on the padding option. -->
        <attr name="pivProgressSize" format="dimension|fraction" />

        <!-- Set the padding of the progress indicator. -->
        <attr name="pivProgressPadding" format="dimension" />

        <!-- Width of the progress indicator border, in a specific dimension or in percentage (20dp or 30%).
             If the specific dimension is less than 0, it is ignored.
             If the percentage is higher than 100, it is treated as (value % 100) -->
        <attr name="pivProgressBorderWidth" format="dimension|fraction" />

        <!-- Set the width of the shadow border. -->
        <attr name="pivProgressShadowBorderWidth" format="dimension" />

        <!-- Set the padding of the progress indicator relative to its shadow., in a specific dimension or in percentage (20dp or 30%).
             If the specific dimension is less than 0, it is ignored.
             If the percentage is higher than 100, it is treated as (value % 100) -->
        <attr name="pivProgressShadowPadding" format="dimension|fraction" />



        <!-- Set whether to show a progress shadow, used by drawers.
             If true, the shadow is drawn -->
        <attr name="pivProgressShadowEnabled" format="boolean" />

        <!-- Set whether the progress should update with an animation.
             If the progress is indeterminate it's ignored.
             If true it updates its progress with an animation, otherwise it will update instantly -->
        <attr name="pivProgressDeterminateAnimationEnabled" format="boolean" />

        <!-- Set the default animation duration for progress. Defaults to 100 -->
        <attr name="pivProgressAnimationDuration" format="integer" />

        <!-- Set whether the view should use right to left layout (used for gravity option)
             If true, start will always be treated as left and end as right.
             If false, on api 17+, gravity will be treated accordingly to rtl rules. -->
        <attr name="pivProgressRtlDisabled" format="boolean" />

        <!-- Set whether to show a wedge or a circle, used by circular determinate drawer.
             If the drawer is not determinate it's ignored.
             If true, a wedge is drawn, otherwise a circle will be drawn -->
        <attr name="pivProgressDrawWedge" format="boolean" />

        <!-- Set whether the progress should be reversed, used by drawers -->
        <attr name="pivProgressReversed" format="boolean" />

        <!-- Set whether the progress should be reset when drawable changed, used by drawers -->
        <attr name="pivProgressRemovedOnChange" format="boolean" />



        <!-- Set the front color of the indicator, used by determinate drawers.
             If the drawer is not determinate or horizontal_determinate it's ignored.
             Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not
             premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b.
             See the Color class for more details. -->
        <attr name="pivProgressFrontColor" format="color" />

        <!-- Set the back color of the indicator, used by determinate drawers.
             If the drawer is not determinate or horizontal_determinate it's ignored.
             Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not
             premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b.
             See the Color class for more details. -->
        <attr name="pivProgressBackColor" format="color" />

        <!-- Set the indeterminate color of the indicator, used by indeterminate drawers.
             If the drawer is not indeterminate or horizontal_indeterminate it's ignored.
             Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not
             premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b.
             See the Color class for more details. -->
        <attr name="pivProgressIndeterminateColor" format="color" />

        <!-- Set the shadow color of the indicator, used by drawers.
             Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not
             premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b.
             See the Color class for more details. -->
        <attr name="pivProgressShadowColor" format="color" />

        <!-- Set the color of the progress indicator shadow border.
             Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not
             premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b.
             See the Color class for more details. -->
        <attr name="pivProgressShadowBorderColor" format="color" />



        <!-- SHAPE OPTIONS -->

        <!-- Progress mode of the indicator -->
        <attr name="pivShapeMode" format="enum" >
            <enum name="normal" value="0"/>
            <enum name="circle" value="1"/>
            <enum name="square" value="2"/>
            <enum name="rectangle" value="3"/>
            <enum name="oval" value="4"/>
            <enum name="rounded_rectangle" value="5"/>
            <enum name="solid_circle" value="6"/>
            <enum name="solid_oval" value="7"/>
            <enum name="solid_rounded_rectangle" value="8"/>
            <enum name="diagonal" value="9"/>
            <enum name="solid_diagonal" value="10"/>
            <enum name="arc" value="11"/>
            <enum name="solid_arc" value="12"/>
            <enum name="corner" value="13"/>
            <enum name="solid_corner" value="14"/>
            <enum name="rounded_corner" value="15"/>
            <enum name="solid_rounded_corner" value="16"/>
        </attr>

        <!-- Custom scale type of the indicator -->
        <attr name="pivShapeScaleType" format="enum" >
            <enum name="matrix" value="0"/>
            <enum name="fitXY" value="1"/>
            <enum name="fitStart" value="2"/>
            <enum name="fitCenter" value="3"/>
            <enum name="fitEnd" value="4"/>
            <enum name="center" value="5"/>
            <enum name="centerCrop" value="6"/>
            <enum name="centerInside" value="7"/>
            <enum name="topCrop" value="8"/>
            <enum name="bottomCrop" value="9"/>
        </attr>

        <!-- Set the gravity of the cut.
             It will follow the right to left layout (on api 17+), if not disabled. -->
        <attr name="pivShapeCutGravity" format="enum" >
            <enum name="start" value="1"/>
            <enum name="end" value="2"/>
            <enum name="top" value="3"/>
            <enum name="top_start" value="4"/>
            <enum name="top_end" value="5"/>
            <enum name="bottom" value="6"/>
            <enum name="bottom_start" value="7"/>
            <enum name="bottom_end" value="8"/>
        </attr>


        <!-- Set the inner padding of the image relative to the view, in a specific dimension or in percentage (20dp or 30%).
             If the specific dimension is less than 0, it is ignored.
             If the percentage is higher than 100, it is treated as (value % 100) -->
        <attr name="pivShapeInnerPadding" format="dimension|fraction" />

        <!-- Set the border width of the image. -->
        <attr name="pivShapeBorderWidth" format="dimension" />

        <!-- Set the ratio of the image. Doing so, width is calculated as height * ratio -->
        <attr name="pivShapeRatio" format="float" />

        <!-- Set the x radius of the image. Used in rounded rectangles -->
        <attr name="pivShapeRadiusX" format="float" />

        <!-- Set the y radius of the image. Used in rounded rectangles -->
        <attr name="pivShapeRadiusY" format="float" />

        <!-- Set the cut radius 1, in a specific dimension or in percentage (20dp or 30%).
             If the specific dimension is less than 0, it is ignored.
             If the percentage is higher than 100, it is treated as (value % 100). Used in cut shapes -->
        <attr name="pivShapeCutRadius1" format="dimension|fraction" />

        <!-- Set the cut radius 2, in a specific dimension or in percentage (20dp or 30%).
             If the specific dimension is less than 0, it is ignored.
             If the percentage is higher than 100, it is treated as (value % 100). Used in cut shapes -->
        <attr name="pivShapeCutRadius2" format="dimension|fraction" />

        <!-- Set the solid color used by solid shapes -->
        <attr name="pivShapeSolidColor" format="color" />



        <!-- Set whether the border should be paint over the image. -->
        <attr name="pivShapeBorderOverlay" format="boolean" />




        <!-- Set the background drawable to draw under the image. Does not follow rounded shapes! -->
        <attr name="pivShapeBackground" format="reference|color" />

        <!-- Set the foreground drawable to draw over the image. Does not follow rounded shapes! -->
        <attr name="pivShapeForeground" format="reference|color" />

        <!-- Set the background color of the image, using the shape.
             Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not
             premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b.
             See the Color class for more details. -->
        <attr name="pivShapeBackgroundColor" format="color" />

        <!-- Set the foreground color of the image, using the shape.
             Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not
             premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b.
             See the Color class for more details. -->
        <attr name="pivShapeForegroundColor" format="color" />

        <!-- Set the border color of the image.
             Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not
             premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b.
             See the Color class for more details. -->
        <attr name="pivShapeBorderColor" format="color" />



        <!-- BLUR OPTIONS -->

        <!-- Set the mode of the blur to use -->
        <attr name="pivBlurMode" format="enum" >
            <enum name="disabled" value="0"/>
            <enum name="gaussian5x5" value="1"/>
            <enum name="gaussian5x5_rs" value="2"/>
            <enum name="gaussian3x3" value="3"/>
            <enum name="gaussian3x3_rs" value="4"/>
            <enum name="gaussian" value="5"/>
            <enum name="gaussian_rs" value="6"/>
            <enum name="box3x3" value="7"/>
            <enum name="box3x3_rs" value="8"/>
            <enum name="box5x5" value="9"/>
            <enum name="box5x5_rs" value="10"/>
            <enum name="stack" value="11"/>
            <enum name="stack_rs" value="12"/>
        </attr>

        <!-- Set the blur radius used -->
        <attr name="pivBlurRadius" format="integer" />

        <!-- Rate to downSample the image width and height, based on the view size. The bitmap is
            downsampled to be no more than the view size divided by this rate. -->
        <attr name="pivBlurDownSamplingRate" format="float" />

        <!-- Whether the original bitmap should be blurred only once. If so, optimizations occur -->
        <attr name="pivBlurStatic" format="boolean" />

        <!-- Whether the image should be blurred with a java equivalent of the renderscript algorithm if an error occurs -->
        <attr name="pivBlurUseRsFallback" format="boolean" />

        <!-- Number of threads to use to blur the image (no more than available). If it's less than 1, all available cores are used -->
        <attr name="pivBlurNumThreads" format="integer" />

    </declare-styleable>
</resources>